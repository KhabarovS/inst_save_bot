"""–ú–æ–¥—É–ª—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –∏–∑ Instagram"""
import asyncio
import logging
import os
import re
import subprocess
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session import aiohttp
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile

from enums import HosterEnum
from tools import rm_tree, cut_query

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logging.getLogger("aiogram").setLevel(logging.CRITICAL)

TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

INSTAGRAM_REGEX = r"(https?://www\.instagram\.com/[^\s]+)"
TIKTOK_REGEX = r"https?://(?:www\.)?(?:tiktok\.com/.*/video/(\d+)|vt\.tiktok\.com/\w+/?)"

DOWNLOAD_PATH = Path("downloads")
DOWNLOAD_PATH.mkdir(exist_ok=True)

CONFIG = {
    HosterEnum.INSTAGRAM: {},
    HosterEnum.TIKTOK: {
        "has_spoiler": True,
        "caption": "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –¥–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –¢–∏–∫–¢–æ–∫! –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º –ü–æ–ª–∏–Ω–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
    }
}


async def get_real_url(short_url: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤

    Args:
        short_url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(url=short_url, allow_redirects=True) as response:
            return str(response.url)


async def download_content(url: str, content_type: HosterEnum) -> list[Path]:
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç

    Args:
        url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
        content_type: —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    logger.debug(f'–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, {content_type=}')

    cookies = str(
        Path('cookies', 'instagram_cookies.txt' if content_type == HosterEnum.INSTAGRAM else 'tiktok_cookies.txt')
    )


    logger.debug(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∫—É–∫–æ–≤: {cookies}")

    try:
        subprocess.run(
            [
                "gallery-dl",
                "--cookies", cookies,
                "-d", str(DOWNLOAD_PATH),
                url
            ],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            check=True,
        )
        files = sorted(DOWNLOAD_PATH.glob('**/*'), key=lambda x: x.stat().st_ctime, reverse=True)
        logger.debug(f'–°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files}')
        content = [f for f in files if f.is_file()][:1]

        logger.debug(f"–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {content}")

        return content

    except subprocess.CalledProcessError as ex:
        logger.error(f"–û—à–∏–±–∫–∞ gallery-dl: {ex}")
        return []


@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º –∫–∞–∫ –≤–∏–¥–µ–æ

    Args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    if message.text:

        if match := re.search(INSTAGRAM_REGEX, message.text):
            content_type = HosterEnum.INSTAGRAM

        elif match := re.search(TIKTOK_REGEX, message.text):
            content_type = HosterEnum.TIKTOK

        else:
            content_type, match = None, None

        logger.debug(f'–ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø: {content_type}')

        if match:
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç {content_type.value} "
                f"–æ—Ç {message.from_user.username} ({message.from_user.id})"
            )

            try:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text='üöÄ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ'
                )

                real_url = await get_real_url(short_url=match.group(0))
                logger.debug(f"–†–∞—Å–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞: {real_url}")

                files = await download_content(url=cut_query(url=real_url), content_type=content_type)

                if files:
                    for file in files:
                        if file.suffix in ('.jpg', 'jpeg', '.png'):
                            await message.reply_photo(FSInputFile(path=file), **CONFIG.get(content_type, {}))
                        else:
                            await message.reply_video(FSInputFile(path=file), **CONFIG.get(content_type, {}))
                        logger.info(f'–§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç')
                else:
                    await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ, —É–≤—ã üçå")

            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {ex}")

            finally:
                for p in DOWNLOAD_PATH.iterdir():
                    rm_tree(path=p)


async def main():
    """–¢–æ—á–∫–∞ G"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())

    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
